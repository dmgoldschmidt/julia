Fri 19 Feb 2021 04:22:24 PM PST
I've been learning julia for the past two or three weeks.  So far, I have a working sort.jl, CommandLine.jl,
VarArray.jl, and fts_flowsets.jl:

sort.jl: similar to Heap.h but it implements a TableComp functor which does lexicographic ordering in tables( which
are of type Array[][].

CommandLine.jl is similar to the C++ version, but its convenience function getvals inputs a julia Dict defaults,
then parses an input CommandLine (which is an Array::strings) and uses it to modify the defaults.

VarArray.jl automatically extends the length of a VarArray up to a specified maximum.  Right now, the maximum
is 10 times the starting length, but this could be changed to a user-specified value.

fts_flowsets.jl reads a raw wsa file in either text or .gz format and outputs a table of feature vectors, consisting
of four pseudo-median values for IAT, DUR, BYTES_IN and BYTES_OUT, as well as the connection ident, the threat level,
and the no. of records found for the given connection.  This code ran successfully on a full day (07-01) of wsa data,
producing over 2 million fts feature vectors, with 249,298 consisting of at least 10 records.

Sat 20 Feb 2021 11:48:10 AM PST
It took me two hours this morning to figure out how to convert the Array that is returned from "split" to a Tuple,
which will supposedly improve performance.  Obvious things, like " row = tuple(split(line,"|")) " don't work. It
turns out that you need  " row = tuple(split(line,"|")...) " which seems ridiculous.  I also tried logical things
like "row = tuple(split(line,"|")[1:end]) " and probably twenty others.  Coping with the sometimes bizarre syntax
together with the shitty error messages is quite a challenge.


Sat 20 Feb 2021 05:15:26 PM PST
Working now on features2cdf.jl.  The plan:
1. read the feature file into a big table
2. create a col = IndexPair[]
3. for each cdf-able column in the table:
   a. push an IndexPair for each entry into col (the first time -- after that, the space in col already exists)
   b. sort col
   c. for i in 1:n = length(col); replace table[j][col[i].index] with i/n
4. write the table back out
   
Sun 21 Feb 2021 08:27:25 AM PST
Notes for sort:
1. Change TableComp to LexOrder (more descriptive)
2. Change all comparison functors to return -1,0,or 1 depending on >,=,<

Sun 21 Feb 2021 05:10:39 PM PST
So if A = Matrix(m,n) then A[:,j] is a column vector consisting of the jth column of A.  BUT
if we change A[:,j] by, say, sorting it, this doesn't necessarily change A.  so e.g. the code

A = Matrix(m,n)
heapsort(A[:,1])

doesn't change A.  Instead, we need
A = Matrix(m,n)
v = A[:,1]
heapsort(v)
A[:1] = v

which is of course ridiculous, but there you are.

Tue 23 Feb 2021 03:29:43 PM PST
Here are my comments for the latest commit:
util.jl:
initial commit.  Moved VarArray here and deleted VarArray.jl.  Moved is_dotted_quad and tryopen as well

fts_flowsets.jl:
implemented @isdefined for sort.jl, util.jl, CommandLine.jl,
added fqdn to struct Flowset
added sldn or "(missing)" to output
now using tryopen for opening files

sort.jl:
changed "TableComp" to "LexComp"
implemented @isdefined

features2cdf:
implemented @isdefined, and moved is_dotted_quad to util.jl

clusters.jl:
initial commit.

I ran PEcluster with four parameters from the wsa data on the output of fts_features.jl -> features2cdf.jl on the aws.
Got 64 clusters on about 250K data.  Each fts_flowset now contains:  ident,(4 features), fqdn, threat, descr.
clusters.jl processes the cluster file (nominally clusters.out) from PEcluster by sorting on (cluster_no, prob)
and then printing one line for each cluster: cluster_no, #connections, average prob.
(just added SLDN to the list, but I'm going to change it to FQDN).

Thu 04 Mar 2021 09:15:30 AM PST
Wrote and debugged (I hope!) predict.jl, which inputs 5-dimensional clustering on the wsa cdf data.  The fifth
variable is the threat value, and the idea is to compute the conditional pdf on the threat using the other four
variables and then score the threat.  So far, the results have been fairly disappointing.  There's a counter-intuitive
result that I get better answers with fewer states (clusters).  This suggests that there's a bug somewhere.  Right
now, I'm using the conditional distribution from the full n-state model, but there's nothing to prevent just
choosing the best state and getting prediction from that state only.  I'll try that next.  I also want to
experiment with a few extra derived variables, like inbytes/(inbytes+outbytes) and a language model score on
the fqdn.

Fri 05 Mar 2021 04:50:24 PM PST
Making some mods to predict, but so far I have no joy.  The scoring rate is very bad for all models so far.  I'm
about to compute simple rms error.  I also discovered that Vector{Float64}(undef, dim) is NOT a good way to initialize
a vector.  Turns out you should use fill(0.0,dim) or fill(0.0, (nrows,ncols)).  This is more bizarro julia usage.

Sat 06 Mar 2021 04:50:08 PM PST
OK, I'm getting basically garbage results back on threat prediction.  There's two possibilities:  1) a bug,
2) there's no soup in the four predictors towards the threat number.  To disambiguate these, my next move
will be to generate fake test data with four predictors consisting of random no.s in [0,1], and a fifth
goal which is the sum of all four plus a small amount of noise.  Then I'll run PE cluster on the fake data,
and then predict.jl.  I *must* see a strong ability to predict the sum from the other four.  Before I start,
I want to review the connection between the conditional distribution and linear regression.

Sat 13 Mar 2021 09:42:00 PM PST
I essentially rewrote predict so that I can test some of the code by building a 1-state model directly from
the simulated (or real, I guess) data and then predicting with it.  Once I get that working, I can go back to
the multi-state model on the simulated data and finally on the real data.  Next step:  debugging the new code.
Along the way, I implemented the matrix Welford algorithm, and my own version of tryparse, called myparse, which
instead of returning Nothing on an error, prints an error message and exits.

Mon 15 Mar 2021 10:16:34 PM PDT
It looks like predict.jl is running OK, both in test mode (1 state from the sim data) and from a model file built
from the sim data.  I fixed quite a few minor glitches.  One more test, using 2 states from the model file, which
should give substantially the same results.  Then I'll re-build the real model from the wsa data and rerun predict.
We'll see if there's any soup.

Wed 17 Mar 2021 05:01:20 PM PDT
I think I wasn't really doing prediction right, so I've changed predict.jl to compute a per data point per state
weight based on the pdf of the four-long predictor.  I find the "best state at time t" using this, and compute
a prediction using that state.  I also make a "soft choice" by doing a weighted sum across all the states
on the conditional mean and variance.  So far, the results are terrible.

Thu 18 Mar 2021 05:43:12 PM PDT
I built an 8-state test model (4 predictors + threat) using simulated data, which involved an 8x4 random matrix M.
At time t, I print M[t%8+1,:] followed by the sum of the four random no.s, but I apply a small amount of white
noise to all five values before printing.  If I run PEcluster on this data, I get an 8-state model which nails
the 8 random states.  I then use the model+data together with predict.jl and as expected, I get very strong
prediction scores.  So I don't think either program has bugs, it's just that there is no discernable linear-ish
relationship between the actual 4 predictors and the threat.
I also got the julia notebook running again.  For some reason, I couldn't reproduce my earlier success using Ijulia.
But I somehow blundered into successfully importing Conda, figuring out where the notebook execution point was,
and installing an alias "notebook" in .bashrc.  So I can get a julia notebook going by just typing "notebook"
at the emacs shell prompt.  Unfortunately, there's something hokey with markdown/latex -- I tried to install equation numbering, but it didn't work, and not only that, my version doesn't recognize \begin{equation}, although \begin{align} does work.  Go figure.  See ~/temp for some code that I can supposedly execute in a notebook cell, but it doesn't seem
to work (with either \begin{equation} or \begin{align}.  So at this point, serious use of latex in the notebook seems
to be a non-starter.

