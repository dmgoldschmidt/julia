Fri 19 Feb 2021 04:22:24 PM PST
I've been learning julia for the past two or three weeks.  So far, I have a working sort.jl, CommandLine.jl,
VarArray.jl, and fts_flowsets.jl:

sort.jl: similar to Heap.h but it implements a TableComp functor which does lexicographic ordering in tables( which
are of type Array[][].

CommandLine.jl is similar to the C++ version, but its convenience function getvals inputs a julia Dict defaults,
then parses an input CommandLine (which is an Array::strings) and uses it to modify the defaults.

VarArray.jl automatically extends the length of a VarArray up to a specified maximum.  Right now, the maximum
is 10 times the starting length, but this could be changed to a user-specified value.

fts_flowsets.jl reads a raw wsa file in either text or .gz format and outputs a table of feature vectors, consisting
of four pseudo-median values for IAT, DUR, BYTES_IN and BYTES_OUT, as well as the connection ident, the threat level,
and the no. of records found for the given connection.  This code ran successfully on a full day (07-01) of wsa data,
producing over 2 million fts feature vectors, with 249,298 consisting of at least 10 records.

Sat 20 Feb 2021 11:48:10 AM PST
It took me two hours this morning to figure out how to convert the Array that is returned from "split" to a Tuple,
which will supposedly improve performance.  Obvious things, like " row = tuple(split(line,"|")) " don't work. It
turns out that you need  " row = tuple(split(line,"|")...) " which seems ridiculous.  I also tried logical things
like "row = tuple(split(line,"|")[1:end]) " and probably twenty others.  Coping with the sometimes bizarre syntax
together with the shitty error messages is quite a challenge.


Sat 20 Feb 2021 05:15:26 PM PST
Working now on features2cdf.jl.  The plan:
1. read the feature file into a big table
2. create a col = IndexPair[]
3. for each cdf-able column in the table:
   a. push an IndexPair for each entry into col (the first time -- after that, the space in col already exists)
   b. sort col
   c. for i in 1:n = length(col); replace table[j][col[i].index] with i/n
4. write the table back out
   
Sun 21 Feb 2021 08:27:25 AM PST
Notes for sort:
1. Change TableComp to LexOrder (more descriptive)
2. Change all comparison functors to return -1,0,or 1 depending on >,=,<

Sun 21 Feb 2021 05:10:39 PM PST
So if A = Matrix(m,n) then A[:,j] is a column vector consisting of the jth column of A.  BUT
if we change A[:,j] by, say, sorting it, this doesn't necessarily change A.  so e.g. the code

A = Matrix(m,n)
heapsort(A[:,1])

doesn't change A.  Instead, we need
A = Matrix(m,n)
v = A[:,1]
heapsort(v)
A[:1] = v

which is of course ridiculous, but there you are.
