#=
Development notes:

Mon Jun 21 23:30:16 2021
I've discarded the functor idea in favor of an Array of Channels,
and passing parameters to each task.

Modified reader calling seq. to take stream,eof::Ref{Bool}
(I tested the Ref{Bool} idea in the REPL and it worked)
Modified writer calling seq to take stream, ack_quit::RefBool to
acknowledge the quit message.  If this doesn't work, I'll use
a separate Channel to send a quit message which master can 
wait for.

Tue 22 Jun 2021 10:06:07 AM PDT
On second thought, it's better for reader to send an EOF message
over the reader channel, because the master is reading this
channel repeatedly anyway, so all it has to do is check for EOF.
If it checks a Bool instead, it has to wait for that to happen.
With writer, the master isn't reading the writer channel, and it
shouldn't, because all the workers are sending output on it.

=#

include("util.jl")
include("stats.jl")

@enum Ident OPEN=1 DATA=2 ERROR=3 EOF=4 QUIT=5 RAW=6 


mutable struct ReaderMessage
  ident::Ident
  line::String
end


function reader(stream::IOStream, skip::Int64)
  for i in 1:skip
    readline(stream)
  end
  t = Threads.threadid()
  for line in eachline(stream)
    println("thread $t: sending $line")
    put!(reader_chan,ReaderMessage(DATA,line))
    println("thread $t: DATA sent")
  end
  close(stream)
  println("thread $t: closed $file. Sending eof")
  put!(reader_chan,ReaderMessage(EOF,""))
  println("thread $t: EOF sent")
end

# mutable struct OutputData #worker -> writer
#   netident::String
#   data::Array{Float64}
#   nrecs::Int64
# end



mutable struct WriterMessage
  ident::Ident
  line::String
end


function writer(stream::IOStream,ack_quit::Ref{Bool})
  t = Threads.threadid()
  while true
    println(stream,"writer on thread $t: waiting for WriterMessage")
    msg = take!(writer_chan)
    println("thread $t: writer got $(msg.ident) $(msg.output.netident)")
    if msg.ident == QUIT
      println("thread $t: writer got QUIT")
      close(stream)
      #println("thread $t: closed $(writer.file)")
      ack_quit[] = true
      break
    elseif msg.ident == DATA
      println("thread $t: writing $(line)")
      println(stream,msg.line)
    end
  end #while
  println("writer exiting")
end

mutable struct NetflowData #parser -> master
  time::Int64 # rounded to nearest second
  netident::String # enip|webip|webport
  data::Vector{Float64}
  dir::Int64
  function NetflowData(t::Int64 = 0,n::String = "",d::Vector{Float64} = zeros(8),d1 = 0)                        
    return new(t,n,d,d1)
  end
end

# mutable struct ParserMessage #parser -> master              
#   ident::Ident
#   data::NetflowData
# end

mutable struct WorkerMessage #master -> worker
  ident::Ident
  record::NetflowData
end

mutable struct WorkerData # calling sequence parameter
  worker_no::Int64
  duration::Int64
  min_recs::Int64
  buckets::Matrix{Float64} # bucket boundaries (non-uniform to make the expected reference value uniform)
  ref_IOcounts::Vector{Float64}
end

mutable struct CurrentValues # running data per flowset
  start_time::Int64 
  netident::String
  active::Bool
  nrecs::Int64
  hist::Matrix{Int64}
  IOpattern::Int64
  function CurrentValues(t,i, a = false, n = 0, h = ones(Int64,8,16), io = 0) #constructor
    #println("constructing FlowsetData($time,$ident)")
    return new(t,i,a,n,h,io) # note basic flattening for the histograms
  end
end
function Worker(w::WorkerData,ack_open::Array{Bool})
  start = (1,4) # fields 1-3 in NetflowData.data are for direction of flow = input(dir=1), 4-7 for output(dir=2) 
  stop = (3,7)
  t = Threads.threadid()
  println("worker $(w.worker_no) on thread $t with  WorkerData: $w")
  current = CurrentValues(0,"") #initialize for next flowset
  println("Initial values: $current")
  println("worker $(w.worker_no): entering while loop")
  exit(0)
  while true
    println("worker $(w.worker_no) on thread $t: waiting for message")
    msg = take!(worker_chan[w.worker_no])
    if msg.ident == OPEN # open a new flowset
      println("worker $(w.worker_no) on thread $t: got $(msg.ident). active = $(current.active)")
      if current.active # an active worker can't be OPENed.  Must expire or get QUIT first
        println("worker $w.worker_no: got OPEN message while active on $(current.netident).  Bailing out")
        exit(0)
      else # inactive, so re-initialize
        current = CurrentValues(msg.record.time,msg.record.netident,true) 
        println("worker $(w.worker_no) initializing: start_time = $(current.start_time), netident = $(current.netident)")
        ack_open[w.worker_no] = true
      end
    
    elseif !current.active #flowset is inactive and this is not an OPEN message
      if msg.ident == QUIT
        ack_quit[w.worker_no] = true # acknowledge QUIT
        break #exit the while loop
      else
        println(stderr,"worker $(w.worker_no) got a $(msg.ident) msg for inactive flowset $(current.netident). Bailing out")
        exit(1)
      end
      
    elseif msg.ident == QUIT || (msg.ident == DATA && msg.record.time - current.start_time > w.duration)
      # flowset is active but either it has expired, or we're cleaning up before QUITing
      if current.nrecs >= w.min_recs #OK to write (if not, just ignore)
        line = current.netident
        chi_sq = Array{Float64}(undef,8)
        for i in 1:8 #convert counts to tail probs for each feature
          bucket_sum = 16.0 # all buckets were initially set to 1 for flattening
          for j in 1:16; bucket_sum += hist[i,j]; end
          for j in 1:16
            expected = bucket_sum/16.0 #= reference distro is uniform. The bucket sizes are non-uniform in general. They
            are computed by a separate function making the overall distribution uniform, 
            and they are set by the master task when the workers are launched. 
            NOTE: this doesn't work for iopattern! We need reference counts here. 
            =#   
            x = hist[i,j] - expected
            chi_sq[i] = stats.gammaq(15,(x*x)/expected)
          end #for j
          line = line*" $chi_sq[i]" # add to the output line
        end #for i
        
        line = line*" $(current.nrecs)\n"
        put!(writer_chan,WriterMessage(DATA,line)) # send it to the writer
      end #output written
      current.active = false
      if msg.ident == QUIT
        ack_quit[w.worker_no] = true # acknowledge QUIT
        break
      end # worker will exit

    elseif msg.ident == DATA # flowset is active and time has not expired.  Update current.hist from NetflowData
      dir = msg.record.dir # direction of flow: 1 = input, 2 = output
      for i in start[dir]:stop[dir] # input record = 1,2,3.  output record = 4,5,6,7
        j = 1
        while msg.record.data[i] > w.buckets[i,j] && j < 16 # find the bucket
          j += 1
        end
        current.hist[i,j] += 1 #update the bucket count
      end
      #update IOpattern by one bit (namely dir-1) after left shift 1 
      current.IOpattern = ((current.IOpattern << 1) | (dir-1)) & 15 
      current.hist[8,current.IOpattern] += 1 
      current.nrecs += 1
    else
      println(stderr, "worker $(w.worker_no) got $(msg.ident) message. Bailing out.")
      exit(1)
    end #msg = DATA
  end #while true 
end #function
